"use strict";(self.webpackChunkfana_docs=self.webpackChunkfana_docs||[]).push([[639],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=i,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={id:"node-sdk-reference"},r="Node SDK Reference",l={unversionedId:"sdk/node-sdk-reference",id:"sdk/node-sdk-reference",title:"Node SDK Reference",description:"The Node SDK exports two classes:",source:"@site/docs/sdk/node-sdk-reference.md",sourceDirName:"sdk",slug:"/sdk/node-sdk-reference",permalink:"/fana-docs/docs/sdk/node-sdk-reference",draft:!1,editUrl:"https://github.com/fana-io/fana-docs/docs/sdk/node-sdk-reference.md",tags:[],version:"current",frontMatter:{id:"node-sdk-reference"},sidebar:"docs",previous:{title:"Using the Node SDK",permalink:"/fana-docs/docs/sdk/using-node-sdk"}},s={},c=[{value:"<code>FanaConfig</code>",id:"fanaconfig",level:2},{value:"<code>FanaConfig</code> Constructor Parameters:",id:"fanaconfig-constructor-parameters",level:3},{value:"<code>FanaConfig</code> Instance Methods:",id:"fanaconfig-instance-methods",level:3},{value:"<code>FanaConfig.prototype.connect()</code>",id:"fanaconfigprototypeconnect",level:4},{value:"<code>FanaClient</code>",id:"fanaclient",level:2},{value:"<code>FanaClient</code> Constructor Parameters:",id:"fanaclient-constructor-parameters",level:3},{value:"<code>FanaClient</code> Instance Methods:",id:"fanaclient-instance-methods",level:3},{value:"<code>FanaClient.prototype.evaluateFlag(flagKey, userContext, defaultValue)</code>",id:"fanaclientprototypeevaluateflagflagkey-usercontext-defaultvalue",level:4},{value:"<code>FanaClient.prototype.getFlags()</code>",id:"fanaclientprototypegetflags",level:4},{value:"<code>FanaClient.prototype.setFlag(newFlagKey, newFlagData)</code>",id:"fanaclientprototypesetflagnewflagkey-newflagdata",level:4},{value:"<code>FanaClient.prototype.setStream()</code>",id:"fanaclientprototypesetstream",level:4}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"node-sdk-reference"},"Node SDK Reference"),(0,i.kt)("p",null,"The Node SDK exports two classes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FanaConfig")," class"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FanaClient")," class")),(0,i.kt)("h2",{id:"fanaconfig"},(0,i.kt)("inlineCode",{parentName:"h2"},"FanaConfig")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"FanaConfig")," class is used to instantiate a ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," object, which is the first step to setting up with the Node SDK."),(0,i.kt)("h3",{id:"fanaconfig-constructor-parameters"},(0,i.kt)("inlineCode",{parentName:"h3"},"FanaConfig")," Constructor Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sdkKey"),": Expects a ",(0,i.kt)("strong",{parentName:"li"},"string")," representing your Node SDK key. This is provided in the Dashboard's Settings page."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bearerAddress"),": Expects a ",(0,i.kt)("strong",{parentName:"li"},"string")," representing the address where the Flag Bearer is being hosted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"reinitializationInterval"),": (Optional) Expects an ",(0,i.kt)("strong",{parentName:"li"},"integer")," representing the number of milliseconds the client should wait between reinitializations. If not provided, there will be no reinitializations. More information about this functionality in the ",(0,i.kt)("inlineCode",{parentName:"li"},"FanaClient.prototype.getFlags()")," section below.")),(0,i.kt)("h3",{id:"fanaconfig-instance-methods"},(0,i.kt)("inlineCode",{parentName:"h3"},"FanaConfig")," Instance Methods:"),(0,i.kt)("h4",{id:"fanaconfigprototypeconnect"},(0,i.kt)("inlineCode",{parentName:"h4"},"FanaConfig.prototype.connect()")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Instantiates a ",(0,i.kt)("inlineCode",{parentName:"li"},"FanaClient")," object"),(0,i.kt)("li",{parentName:"ol"},"Has the client instance fetch flag data from Flag Bearer"),(0,i.kt)("li",{parentName:"ol"},"Has the client instance set up SSE connection with Flag Bearer"),(0,i.kt)("li",{parentName:"ol"},"Returns client instance object")),(0,i.kt)("h2",{id:"fanaclient"},(0,i.kt)("inlineCode",{parentName:"h2"},"FanaClient")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"FanaClient")," class generates an object responsible for holding flag data and providing the essential ",(0,i.kt)("inlineCode",{parentName:"p"},"evaluateFlags()")," method."),(0,i.kt)("h3",{id:"fanaclient-constructor-parameters"},(0,i.kt)("inlineCode",{parentName:"h3"},"FanaClient")," Constructor Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config"),": Expects a ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"FanaConfig")," object"),"."),(0,i.kt)("li",{parentName:"ul"},"Note that ",(0,i.kt)("inlineCode",{parentName:"li"},"FanaConfig.prototype.connect()")," automatically instantiates the client instance for you, so you needn't do this yourself.")),(0,i.kt)("h3",{id:"fanaclient-instance-methods"},(0,i.kt)("inlineCode",{parentName:"h3"},"FanaClient")," Instance Methods:"),(0,i.kt)("h4",{id:"fanaclientprototypeevaluateflagflagkey-usercontext-defaultvalue"},(0,i.kt)("inlineCode",{parentName:"h4"},"FanaClient.prototype.evaluateFlag(flagKey, userContext, defaultValue)")),(0,i.kt)("p",null,"This method takes three arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"flagKey"),": Expects a ",(0,i.kt)("strong",{parentName:"li"},"string")," representing the key of the flag that you wish to evaluate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"userContext"),": Expects an ",(0,i.kt)("strong",{parentName:"li"},"object")," containing the attributes pertaining to a user or session.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{ userId: 'jjuy', beta: true, state: 'CA' }")),(0,i.kt)("li",{parentName:"ul"},"This is an example. The attributes you provide will be dependent on your setup."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"defaultValue"),": Expects a ",(0,i.kt)("strong",{parentName:"li"},"boolean")," representing what the evaluation should be in cases where flag data is unavailable or the provided ",(0,i.kt)("inlineCode",{parentName:"li"},"flagKey")," is invalid. This is optional and is ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," by default.")),(0,i.kt)("p",null,"This method processes the User Context against the flag targeting settings and returns the evaluation as ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The below methods are called automatically and are only here for reference. You needn't invoke these.")),(0,i.kt)("h4",{id:"fanaclientprototypegetflags"},(0,i.kt)("inlineCode",{parentName:"h4"},"FanaClient.prototype.getFlags()")),(0,i.kt)("p",null,"This method sends an initialization GET to the Flag Bearer. The Flag Bearer then returns the latest flag ruleset. The client instance then stores it in its ",(0,i.kt)("inlineCode",{parentName:"p"},"flags")," instance property."),(0,i.kt)("p",null,"This method is automatically invoked during ",(0,i.kt)("inlineCode",{parentName:"p"},"FanaConfig.prototype.connect()"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("h5",{parentName:"blockquote",id:"on-reinitializationssyncing"},"On Reinitializations/Syncing"),(0,i.kt)("p",{parentName:"blockquote"},"Network failures can potentially cause the SDK to fall out of sync as it may miss an update streamed from the Flag Bearer. To help with this, you can specify a ",(0,i.kt)("inlineCode",{parentName:"p"},"reinitializationInterval")," when you instantiate your ",(0,i.kt)("inlineCode",{parentName:"p"},"FanaConfig")," object for the first time. At each interval, the SDK will call ",(0,i.kt)("inlineCode",{parentName:"p"},"getFlags")," again, refreshing its internal flagset with the latest data.")),(0,i.kt)("h4",{id:"fanaclientprototypesetflagnewflagkey-newflagdata"},(0,i.kt)("inlineCode",{parentName:"h4"},"FanaClient.prototype.setFlag(newFlagKey, newFlagData)")),(0,i.kt)("p",null,"This method simply updates the client instance's ",(0,i.kt)("inlineCode",{parentName:"p"},"flags")," instance property with the new data. This occurs when updates are streamed via the SSE connection with the Flag Bearer."),(0,i.kt)("h4",{id:"fanaclientprototypesetstream"},(0,i.kt)("inlineCode",{parentName:"h4"},"FanaClient.prototype.setStream()")),(0,i.kt)("p",null,"This method sets up an event source stream with the Flag Bearer. This allows for the client instance to receive real-time updates to flag data."))}d.isMDXComponent=!0}}]);